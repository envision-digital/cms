$default-row-width: 	960;

$default-colspan: 		1;
$default-cols: 			4;
$default-col-margin: 	1;

$default-padding: 		0;
$default-row-margin:	0 auto;

// dna-row
// -------------------------------------------------------------------
// this mixin will create the rows for the grid
//
// @param    map        $settings    object containing all the settings for the row
//
// @key      string     screen       media query identifier set in _vars.scss
// @key      integer    width        max width of the row in pixels
// @key      integer    margin       percentage of margin
// @key      integer    padding      percentage of padding
//
// all keys have defaults that can be set in _vars.scss, if a key is
// not included in the map the default will be used

@mixin en-row( $settings: () ){

    $defaults: (
        screen:         false,
        width:          $default-row-width,
        padding:        $default-padding,
        margin:         $default-row-margin
    );

    // merge the settings and default maps

    $m: map-merge( $defaults, $settings );

    $_screen:           map-get( $m,    screen        );
    // extract the variables from the settings

    $_width:            map-get( $m,     width        );
    $_margin:           map-get( $m,     margin       );
    $_padding:          map-get( $m,     padding      );

    @if $_screen {

        // get the size from the media-sizes map in _vars.scss

        $screen-size:   map-get( $media-sizes, #{$_screen} );

	    @media screen and ( min-width: #{$screen-size} ){

	        @if $_width == false {
	            max-width:      90%;
	        } @else {
	            max-width:      $_width * $rems;
	        }
	        width: 			100%;
	        margin: 		$_margin;
	        padding: 		$_padding;

	    }

	}
	@else {

	    @if $_width == false {
	        max-width:      90%;
	    } @else {
	        max-width:      $_width * $rems;
	    }
	    width: 			100%;
	    margin: 		$_margin;
	    padding: 		$_padding;

	}

	&:before,
	&:after {
	    content: 		"";
	    display: 		table;
	}
	&:after {
	    clear: 			both;
	}
}



// dna-col
// -------------------------------------------------------------------
// this mixin will create the columns for the grid
//
// @param    map        $settings    object containing all the settings for the column
//
// @key      string     screen       media query identifier set in _vars.scss
// @key      integer    span         ratio width of the column
// @key      integer    cols         total amount of colums
// @key      integer    margin       percentage of margin
// @key      integer    padding      percentage of padding
//
// all keys have defaults that can be set in _vars.scss, if a key is
// not included in the map the default will be used

// @include dna-col( (

// 	span: 4, cols: 13, screen: 'watch'

// ) );

@mixin en-col( $settings: () ){

    $defaults: (
        span:        $default-colspan,
        cols:        $default-cols,
        padding:     $default-padding,
        margin:      $default-col-margin,
        screen:      false
    );

    // combine the default and settings maps

    $m: map-merge( $defaults, $settings );

    //@debug $m;

    // extract the values and store them in local variables

    $_screen:           map-get( $m,     screen       );
    $_span:             map-get( $m,     span         );
    $_cols:             map-get( $m,     cols         );
    $_margin:           map-get( $m,     margin       );
    $_padding:          map-get( $m,     padding      );


    // here is where the magic happens

	// margin 1%
	// margin * cols
	// total avail width = 100 - (margin * cols) / span

    $_total-margin:          ($_cols - 1) * $_margin;
    $_total-padding:         0;// ($_cols - 1) * 0 * ($_cols);
    $_spanned-margins:       ($_span - 1) * $_margin;
    $_minus-margin-padding:  (100 - $_total-margin - $_total-padding) / $_cols;

	$_margin: 1;

    // $_width: ( $_span * $_minus-margin-padding ) + $_spanned-margins + 0%;
	// $_totMargin: 100 - ( $_margin * $_cols ) / $_span;
	$_ratio: ( $_span / $_cols );
	$_totMargin: 100 - ( $_margin * $_cols ) / $_span;
	$_totAvail: 100 * $_ratio;
	// $_width: (100 - ( $_margin * $_cols )) / ($_cols - $_span);
	// $_width: (100 / (3col / 2span )) * 2span;
	$__mar: $_totAvail - ( $_margin * (($_span + 3) - $_cols) );
	// $_width: 100 * ( $_span / $_cols ) + ( $_margin * ($_cols / $_span) ); //
	$_width: $__mar;

    // if its a media query

    @if $_screen {

        // get the size from the media-sizes map in _vars.scss

        $screen-size: map-get( $media-sizes, #{$_screen} );

    @media screen and ( min-width: $screen-size ){

        width: $_width + 0%;

        .msie & {
            width: ($_width - .3) + 0% ;
        }

        // padding:         $_padding + 0%;
        float:           left;
        margin-right:    $_margin + 0%;
        margin-bottom:   $_margin + 0% ;

	    // margin:   $_margin + 0% ;

	    &:last-child {
		    // margin-right: 0;
	    }

    }

}

// its the not a media query

@else {

    width: ($_width) + 0%;

    .msie & {
        width: ($_width - .3) + 0% ;
    }

    &:last-child {
        margin-right: 0;
    }

    padding: $_padding + 0%;
    margin-right: $_margin + 0%;
    margin-bottom: $_margin + 0% ;

}

float: left;

}

@function k( $elem ){
    @return map-has-key( $elem );
}

@mixin en-col-list( $list ){
    @each $i in $list {
        @include en-col( $i );
    }
}

